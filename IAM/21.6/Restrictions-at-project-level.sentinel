# Import functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan"
import "tfplan" as plan

# Import gcp-functions/gcp-functions.sentinel
# with alias "gcp"
import "gcp" as gcp

# google_project_iam_member 
# Authoritative iam binding
# https://www.terraform.io/docs/providers/google/r/google_project_iam.html#google_project_iam_member-1
iamMember = plan.find_resources("google_project_iam_member")

# denied_roles_list contains roles that can be used to impersonate identites at the project level.
denied_roles_list = [
    "roles/iam.serviceAccountUser",
    "roles/iam.serviceAccountTokenCreator",
]

violatingIamBinding = plan.filter_attribute_in_list(iamMember,
                        "role", denied_roles_list, true)
                        
# Check if the default App Engine service accounts are defined as members. 
# Default App Spot @appspot.gserviceaccount.com .iam.gserviceaccount.com
#(-compute@developer\\.gserviceaccount\\.com|@appspot\\.gserviceaccount\\.com)
default_sa_regex = ".iam\\.gserviceaccount\\.com"
violatingSa = plan.filter_attribute_matches_regex(iamMember,
                        "member", default_sa_regex, true)
print("violatingSa =", violatingSa)
print("violatingIamBinding = ", violatingIamBinding)

# Main rule
main = rule {
  length(violatingSa["messages"]) is 0 and
  length(violatingIamBinding["messages"]) is 0
}